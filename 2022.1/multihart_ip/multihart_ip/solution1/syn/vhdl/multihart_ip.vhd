-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity multihart_ip is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 20;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of multihart_ip is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "multihart_ip_multihart_ip,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=14.467800,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=256,HLS_SYN_DSP=0,HLS_SYN_FF=15687,HLS_SYN_LUT=29548,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal running_hart_set : STD_LOGIC_VECTOR (31 downto 0);
    signal start_pc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal start_pc_ce0 : STD_LOGIC;
    signal start_pc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_ram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_ram_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal nb_instruction_ap_vld : STD_LOGIC;
    signal nb_cycle_ap_vld : STD_LOGIC;
    signal f_state_fetch_pc_V_fu_233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_reg_398 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal f_state_fetch_pc_V_54_fu_237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_54_reg_408 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal f_state_fetch_pc_V_55_fu_241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_55_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal f_state_fetch_pc_V_56_fu_245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_56_reg_428 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal f_state_fetch_pc_V_57_fu_249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_57_reg_438 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal f_state_fetch_pc_V_58_fu_253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_58_reg_448 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_state_fetch_pc_V_59_fu_257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_59_reg_458 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal h_running_V_fu_261_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal has_exited_V_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_8_fu_271_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_8_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_1_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_9_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_9_reg_488 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_2_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_2_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_10_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_10_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_3_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_3_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_11_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_11_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_4_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_4_reg_513 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_12_fu_327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_12_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_5_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_5_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_13_fu_341_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_13_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_6_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_6_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_14_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_running_V_14_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_7_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal has_exited_V_7_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_state_fetch_pc_V_60_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_state_fetch_pc_V_60_reg_548 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_idle : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_ready : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_ce0 : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_ce0 : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out_ap_vld : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out_ap_vld : STD_LOGIC;
    signal grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal nbi_V_1_loc_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal nbc_V_1_loc_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component multihart_ip_multihart_ip_Pipeline_VITIS_LOOP_189_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        has_exited_V : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_1 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_2 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_3 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_4 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_5 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_6 : IN STD_LOGIC_VECTOR (0 downto 0);
        has_exited_V_7 : IN STD_LOGIC_VECTOR (0 downto 0);
        f_state_fetch_pc_V_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V : IN STD_LOGIC_VECTOR (15 downto 0);
        h_running_V_14 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_13 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_12 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_11 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_10 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_9 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V_8 : IN STD_LOGIC_VECTOR (0 downto 0);
        h_running_V : IN STD_LOGIC_VECTOR (0 downto 0);
        f_state_fetch_pc_V_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        f_state_fetch_pc_V_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        code_ram_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        code_ram_ce0 : OUT STD_LOGIC;
        code_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_ram_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        data_ram_ce0 : OUT STD_LOGIC;
        data_ram_we0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        data_ram_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_ram_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        nbi_V_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        nbi_V_1_out_ap_vld : OUT STD_LOGIC;
        nbc_V_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        nbc_V_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component multihart_ip_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        running_hart_set : OUT STD_LOGIC_VECTOR (31 downto 0);
        start_pc_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        start_pc_ce0 : IN STD_LOGIC;
        start_pc_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        nb_instruction : IN STD_LOGIC_VECTOR (31 downto 0);
        nb_instruction_ap_vld : IN STD_LOGIC;
        nb_cycle : IN STD_LOGIC_VECTOR (31 downto 0);
        nb_cycle_ap_vld : IN STD_LOGIC;
        code_ram_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        code_ram_ce0 : IN STD_LOGIC;
        code_ram_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_ram_address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        data_ram_ce0 : IN STD_LOGIC;
        data_ram_we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        data_ram_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        data_ram_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199 : component multihart_ip_multihart_ip_Pipeline_VITIS_LOOP_189_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start,
        ap_done => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done,
        ap_idle => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_idle,
        ap_ready => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_ready,
        has_exited_V => has_exited_V_reg_473,
        has_exited_V_1 => has_exited_V_1_reg_483,
        has_exited_V_2 => has_exited_V_2_reg_493,
        has_exited_V_3 => has_exited_V_3_reg_503,
        has_exited_V_4 => has_exited_V_4_reg_513,
        has_exited_V_5 => has_exited_V_5_reg_523,
        has_exited_V_6 => has_exited_V_6_reg_533,
        has_exited_V_7 => has_exited_V_7_reg_543,
        f_state_fetch_pc_V_1 => f_state_fetch_pc_V_54_reg_408,
        f_state_fetch_pc_V => f_state_fetch_pc_V_reg_398,
        h_running_V_14 => h_running_V_14_reg_538,
        h_running_V_13 => h_running_V_13_reg_528,
        h_running_V_12 => h_running_V_12_reg_518,
        h_running_V_11 => h_running_V_11_reg_508,
        h_running_V_10 => h_running_V_10_reg_498,
        h_running_V_9 => h_running_V_9_reg_488,
        h_running_V_8 => h_running_V_8_reg_478,
        h_running_V => h_running_V_reg_468,
        f_state_fetch_pc_V_2 => f_state_fetch_pc_V_55_reg_418,
        f_state_fetch_pc_V_3 => f_state_fetch_pc_V_56_reg_428,
        f_state_fetch_pc_V_4 => f_state_fetch_pc_V_57_reg_438,
        f_state_fetch_pc_V_5 => f_state_fetch_pc_V_58_reg_448,
        f_state_fetch_pc_V_6 => f_state_fetch_pc_V_59_reg_458,
        f_state_fetch_pc_V_7 => f_state_fetch_pc_V_60_reg_548,
        code_ram_address0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_address0,
        code_ram_ce0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_ce0,
        code_ram_q0 => code_ram_q0,
        data_ram_address0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_address0,
        data_ram_ce0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_ce0,
        data_ram_we0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_we0,
        data_ram_d0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_d0,
        data_ram_q0 => data_ram_q0,
        nbi_V_1_out => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out,
        nbi_V_1_out_ap_vld => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out_ap_vld,
        nbc_V_1_out => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out,
        nbc_V_1_out_ap_vld => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out_ap_vld);

    control_s_axi_U : component multihart_ip_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        running_hart_set => running_hart_set,
        start_pc_address0 => start_pc_address0,
        start_pc_ce0 => start_pc_ce0,
        start_pc_q0 => start_pc_q0,
        nb_instruction => nbi_V_1_loc_fu_98,
        nb_instruction_ap_vld => nb_instruction_ap_vld,
        nb_cycle => nbc_V_1_loc_fu_94,
        nb_cycle_ap_vld => nb_cycle_ap_vld,
        code_ram_address0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_address0,
        code_ram_ce0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_code_ram_ce0,
        code_ram_q0 => code_ram_q0,
        data_ram_address0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_address0,
        data_ram_ce0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_ce0,
        data_ram_we0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_we0,
        data_ram_d0 => grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_data_ram_d0,
        data_ram_q0 => data_ram_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_ready = ap_const_logic_1)) then 
                    grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                f_state_fetch_pc_V_54_reg_408 <= f_state_fetch_pc_V_54_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_state_fetch_pc_V_55_reg_418 <= f_state_fetch_pc_V_55_fu_241_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                f_state_fetch_pc_V_56_reg_428 <= f_state_fetch_pc_V_56_fu_245_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                f_state_fetch_pc_V_57_reg_438 <= f_state_fetch_pc_V_57_fu_249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                f_state_fetch_pc_V_58_reg_448 <= f_state_fetch_pc_V_58_fu_253_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                f_state_fetch_pc_V_59_reg_458 <= f_state_fetch_pc_V_59_fu_257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                f_state_fetch_pc_V_60_reg_548 <= f_state_fetch_pc_V_60_fu_369_p1;
                h_running_V_10_reg_498 <= running_hart_set(3 downto 3);
                h_running_V_11_reg_508 <= running_hart_set(4 downto 4);
                h_running_V_12_reg_518 <= running_hart_set(5 downto 5);
                h_running_V_13_reg_528 <= running_hart_set(6 downto 6);
                h_running_V_14_reg_538 <= running_hart_set(7 downto 7);
                h_running_V_8_reg_478 <= running_hart_set(1 downto 1);
                h_running_V_9_reg_488 <= running_hart_set(2 downto 2);
                h_running_V_reg_468 <= h_running_V_fu_261_p1;
                has_exited_V_1_reg_483 <= has_exited_V_1_fu_279_p2;
                has_exited_V_2_reg_493 <= has_exited_V_2_fu_293_p2;
                has_exited_V_3_reg_503 <= has_exited_V_3_fu_307_p2;
                has_exited_V_4_reg_513 <= has_exited_V_4_fu_321_p2;
                has_exited_V_5_reg_523 <= has_exited_V_5_fu_335_p2;
                has_exited_V_6_reg_533 <= has_exited_V_6_fu_349_p2;
                has_exited_V_7_reg_543 <= has_exited_V_7_fu_363_p2;
                has_exited_V_reg_473 <= has_exited_V_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_state_fetch_pc_V_reg_398 <= f_state_fetch_pc_V_fu_233_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                nbc_V_1_loc_fu_94 <= grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbc_V_1_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out_ap_vld = ap_const_logic_1))) then
                nbi_V_1_loc_fu_98 <= grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_nbi_V_1_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done)
    begin
        if ((grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    f_state_fetch_pc_V_54_fu_237_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_55_fu_241_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_56_fu_245_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_57_fu_249_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_58_fu_253_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_59_fu_257_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_60_fu_369_p1 <= start_pc_q0(16 - 1 downto 0);
    f_state_fetch_pc_V_fu_233_p1 <= start_pc_q0(16 - 1 downto 0);
    grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start <= grp_multihart_ip_Pipeline_VITIS_LOOP_189_1_fu_199_ap_start_reg;
    h_running_V_10_fu_299_p3 <= running_hart_set(3 downto 3);
    h_running_V_11_fu_313_p3 <= running_hart_set(4 downto 4);
    h_running_V_12_fu_327_p3 <= running_hart_set(5 downto 5);
    h_running_V_13_fu_341_p3 <= running_hart_set(6 downto 6);
    h_running_V_14_fu_355_p3 <= running_hart_set(7 downto 7);
    h_running_V_8_fu_271_p3 <= running_hart_set(1 downto 1);
    h_running_V_9_fu_285_p3 <= running_hart_set(2 downto 2);
    h_running_V_fu_261_p1 <= running_hart_set(1 - 1 downto 0);
    has_exited_V_1_fu_279_p2 <= (h_running_V_8_fu_271_p3 xor ap_const_lv1_1);
    has_exited_V_2_fu_293_p2 <= (h_running_V_9_fu_285_p3 xor ap_const_lv1_1);
    has_exited_V_3_fu_307_p2 <= (h_running_V_10_fu_299_p3 xor ap_const_lv1_1);
    has_exited_V_4_fu_321_p2 <= (h_running_V_11_fu_313_p3 xor ap_const_lv1_1);
    has_exited_V_5_fu_335_p2 <= (h_running_V_12_fu_327_p3 xor ap_const_lv1_1);
    has_exited_V_6_fu_349_p2 <= (h_running_V_13_fu_341_p3 xor ap_const_lv1_1);
    has_exited_V_7_fu_363_p2 <= (h_running_V_14_fu_355_p3 xor ap_const_lv1_1);
    has_exited_V_fu_265_p2 <= (h_running_V_fu_261_p1 xor ap_const_lv1_1);

    nb_cycle_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            nb_cycle_ap_vld <= ap_const_logic_1;
        else 
            nb_cycle_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    nb_instruction_ap_vld_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            nb_instruction_ap_vld <= ap_const_logic_1;
        else 
            nb_instruction_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    start_pc_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            start_pc_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            start_pc_address0 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            start_pc_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            start_pc_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            start_pc_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            start_pc_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            start_pc_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            start_pc_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            start_pc_address0 <= "XXX";
        end if; 
    end process;


    start_pc_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            start_pc_ce0 <= ap_const_logic_1;
        else 
            start_pc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
